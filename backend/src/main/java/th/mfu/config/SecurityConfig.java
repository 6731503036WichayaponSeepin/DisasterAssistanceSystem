package th.mfu.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import th.mfu.security.JwtAuthFilter;

@Configuration
public class SecurityConfig {

    @Autowired
    private JwtAuthFilter jwtAuthFilter;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            // ‚úÖ ‡∏õ‡∏¥‡∏î CSRF (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ JWT ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ session form)
            .csrf(csrf -> csrf.disable())

            // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ path
            .authorizeHttpRequests(auth -> auth
                    // üîπ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ token (‡πÄ‡∏ä‡πà‡∏ô login/register)
                    .requestMatchers(
                            "/api/users/login",
                            "/api/users/register",
                            "/api/rescue/login",
                            "/api/rescue/register"
                    ).permitAll()

                    // üîπ ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡∏ï‡πâ‡∏≠‡∏á role = USER
                    .requestMatchers("/api/users/**", "/api/location/**").hasRole("USER")

                    // üîπ ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏π‡πâ‡∏†‡∏±‡∏¢ ‡∏ï‡πâ‡∏≠‡∏á role = RESCUE
                    .requestMatchers("/api/rescue-teams/**", "/api/rescue/**").hasRole("RESCUE")

                    // üîπ ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ (‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô authenticated() ‡∏Å‡πá‡πÑ‡∏î‡πâ)
                    .anyRequest().permitAll()
            )

            // ‚úÖ ‡πÉ‡∏ä‡πâ Stateless Session (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ JWT ‡πÑ‡∏°‡πà‡∏°‡∏µ session)
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))

            // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° filter JWT ‡∏Å‡πà‡∏≠‡∏ô AuthenticationFilter ‡∏õ‡∏Å‡∏ï‡∏¥
            .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }
}
